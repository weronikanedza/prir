#include "FileLoader.hpp"
#include <math.h>
#include <omp.h>

using namespace std;

double minVal[4] = { 100, 100, 100, 100 };
double maxVal[4];
double average[4];
double deviation[4];
double minMaxTime;
double normalizationTime;
double deviationTime;

void findMinMax(vector<Row> inData);
void normalize(vector<Row> inData);
void standarize(vector<Row> inData);
void calcAverage(vector<Row> inData);
void calcDeviation(vector<Row> inData);

int main() {
	vector<Row> rows = FileLoader().readFile();
	normalize(rows);
	standarize(rows);

	return 0;
}

void calcAverage(vector<Row> inData) {
	double sum[4];
	for (int i = 0; i < inData.size(); i++) {
		for (int j = 0; j < 4; j++) {
			sum[j] += inData[i].features[j];
		}
	}

	for (int j = 0; j < 4; j++) {
		average[j] = sum[j] / inData.size();
	}
}

void calcDeviation(vector<Row> inData) {
	double variation[4];

	for (int i = 0; i < inData.size(); i++) {
		for (int j = 0; j < 4; j++) {
			variation[j] += pow(inData[i].features[j] - average[j], 2)
					/ inData.size();
		}
	}

	for (int j = 0; j < 4; j++) {
		deviation[j] = sqrt(variation[j]);
	}

}

void findMinMax(vector<Row> inData) {

	double begin = omp_get_wtime();

	for (int i = 0; i < inData.size(); i++) {
		for (int j = 0; j < 4; j++) {
			if (minVal[j] > inData[i].features[j]) {
				minVal[j] = inData[i].features[j];
			}

			if (maxVal[j] < inData[i].features[j]) {
				maxVal[j] = inData[i].features[j];
			}
		}
	}

	double end = omp_get_wtime();
	minMaxTime = end - begin;
}

void normalize(vector<Row> inData) {
	findMinMax(inData);
	for (int i = 0; i < inData.size(); i++) {
		for (int j = 0; j < 4; j++) {
			inData[i].features[j] = (inData[i].features[j] - minVal[j])
					/ (maxVal[j] - minVal[j]);
		}
	}
}

void standarize(vector<Row> inData) {
	calcAverage(inData);
	calcDeviation(inData);

	for (int i = 0; i < inData.size(); i++) {
		for (int j = 0; j < 4; j++) {
			inData[i].features[j] = (inData[i].features[j] - average[j])
					/ deviation[j];
		}
	}
}
